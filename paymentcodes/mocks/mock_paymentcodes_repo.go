// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ngavinsir/golangtraining/paymentcodes (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	golangtraining "github.com/ngavinsir/golangtraining"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *golangtraining.PaymentCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Expire mocks base method.
func (m *MockRepository) Expire(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRepositoryMockRecorder) Expire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRepository)(nil).Expire), arg0)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(arg0 context.Context, arg1 string) (golangtraining.PaymentCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(golangtraining.PaymentCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), arg0, arg1)
}

// GetByPaymentCode mocks base method.
func (m *MockRepository) GetByPaymentCode(arg0 context.Context, arg1 string) (golangtraining.PaymentCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPaymentCode", arg0, arg1)
	ret0, _ := ret[0].(golangtraining.PaymentCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPaymentCode indicates an expected call of GetByPaymentCode.
func (mr *MockRepositoryMockRecorder) GetByPaymentCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPaymentCode", reflect.TypeOf((*MockRepository)(nil).GetByPaymentCode), arg0, arg1)
}
